id: CloudConvert
version: -1
name: CloudConvert
description: Use this Playbook to convert a file using CloudConvert
starttaskid: "0"
tasks:
  "0":
    id: "0"
    taskid: e312dcb6-0a30-4bf8-87d7-fe224ea3e1c7
    type: start
    task:
      id: e312dcb6-0a30-4bf8-87d7-fe224ea3e1c7
      version: -1
      name: ""
      iscommand: false
      brand: ""
      description: ''
    nexttasks:
      '#none#':
      - "1"
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": -120
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "1":
    id: "1"
    taskid: c5079d33-05c6-4417-8bf7-777e4521dec2
    type: regular
    task:
      id: c5079d33-05c6-4417-8bf7-777e4521dec2
      version: -1
      name: cloudconvert-import
      description: Import the file
      script: '|||cloudconvert-import'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "2"
    scriptarguments:
      entry_id:
        complex:
          root: inputs.entry_id
          filters:
          - - operator: isNotEmpty
              left:
                value:
                  simple: inputs.entry_id
                iscontext: true
      file_name: {}
      url:
        complex:
          root: inputs.url
          filters:
          - - operator: isNotEmpty
              left:
                value:
                  simple: inputs.url
                iscontext: true
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 190
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "2":
    id: "2"
    taskid: b2b725f9-16ba-4a01-80fd-07536cbda1de
    type: playbook
    task:
      id: b2b725f9-16ba-4a01-80fd-07536cbda1de
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "4"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        simple: ${CloudConvert.Task.id}
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: cloudconvert-check-status
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status != 'finished').id
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 450,
          "y": 390
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "4":
    id: "4"
    taskid: f8d2503c-e635-4066-8379-f2c2825d95d3
    type: regular
    task:
      id: f8d2503c-e635-4066-8379-f2c2825d95d3
      version: -1
      name: cloudconvert-convert
      description: Convert the file
      script: '|||cloudconvert-convert'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "5"
    scriptarguments:
      output_format:
        simple: ${inputs.output_format}
      task_id:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: containsString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: import
          accessor: id
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 590
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "5":
    id: "5"
    taskid: 60b6cca7-30fa-4eb4-8a9d-2cfd1facc193
    type: playbook
    task:
      id: 60b6cca7-30fa-4eb4-8a9d-2cfd1facc193
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    nexttasks:
      '#none#':
      - "6"
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: convert
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: cloudconvert-check-status
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 0
    view: |-
      {
        "position": {
          "x": 450,
          "y": 770
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "6":
    id: "6"
    taskid: 98edea88-9836-489a-8bd4-86678a102915
    type: regular
    task:
      id: 98edea88-9836-489a-8bd4-86678a102915
      version: -1
      name: cloudconvert-export
      description: Export the file
      script: '|||cloudconvert-export'
      type: regular
      iscommand: true
      brand: ""
    nexttasks:
      '#none#':
      - "13"
    scriptarguments:
      export_as:
        simple: ${inputs.export_via}
      task_id:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: isEqualString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: convert
          accessor: id
    separatecontext: false
    view: |-
      {
        "position": {
          "x": 450,
          "y": 940
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "12":
    id: "12"
    taskid: e1bc6465-cd66-4bc2-8cce-263a33fa40d2
    type: playbook
    task:
      id: e1bc6465-cd66-4bc2-8cce-263a33fa40d2
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    scriptarguments:
      AdditionalPollingCommandArgNames:
        simple: is_entry
      AdditionalPollingCommandArgValues:
        simple: "True"
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: containsString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: export
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: cloudconvert-check-status
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 240,
          "y": 1290
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "13":
    id: "13"
    taskid: a00de805-42ab-414e-8420-9176f87c37da
    type: condition
    task:
      id: a00de805-42ab-414e-8420-9176f87c37da
      version: -1
      name: Is the export is to war room entry
      description: Check if exporting to entry
      type: condition
      iscommand: false
      brand: ""
    nexttasks:
      '#default#':
      - "14"
      "yes":
      - "12"
    separatecontext: false
    conditions:
    - label: "yes"
      condition:
      - - operator: isEqualString
          left:
            value:
              complex:
                root: inputs.export_via
            iscontext: true
          right:
            value:
              simple: war_room_entry
    view: |-
      {
        "position": {
          "x": 450,
          "y": 1115
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
  "14":
    id: "14"
    taskid: 89efca25-1c95-4912-87ce-a0d411d51da7
    type: playbook
    task:
      id: 89efca25-1c95-4912-87ce-a0d411d51da7
      version: -1
      name: GenericPolling
      description: |-
        Use this playbook as a sub-playbook to block execution of the master playbook until a remote action is complete.
        This playbook implements polling by continuously running the command in Step \#2 until the operation completes.
        The remote action should have the following structure:

        1. Initiate the operation.
        2. Poll to check if the operation completed.
        3. (optional) Get the results of the operation.
      playbookName: GenericPolling
      type: playbook
      iscommand: false
      brand: ""
    scriptarguments:
      AdditionalPollingCommandArgNames: {}
      AdditionalPollingCommandArgValues: {}
      Ids:
        complex:
          root: CloudConvert.Task
          filters:
          - - operator: containsString
              left:
                value:
                  simple: CloudConvert.Task.operation
                iscontext: true
              right:
                value:
                  simple: export
          accessor: id
      Interval:
        simple: "1"
      PollingCommandArgName:
        simple: task_id
      PollingCommandName:
        simple: cloudconvert-check-status
      Timeout:
        simple: "10"
      dt:
        simple: CloudConvert.Task(val.status!='finished').id
    separatecontext: false
    loop:
      iscommand: false
      exitCondition: ""
      wait: 1
      max: 100
    view: |-
      {
        "position": {
          "x": 660,
          "y": 1290
        }
      }
    note: false
    timertriggers: []
    ignoreworker: false
    skipunavailable: false
    quietmode: 0
view: |-
  {
    "linkLabelsPosition": {},
    "paper": {
      "dimensions": {
        "height": 1505,
        "width": 800,
        "x": 240,
        "y": -120
      }
    }
  }
inputs:
- key: url
  value: {}
  required: false
  description: This is the url of the imported file. If an entry id is supplied, do
    not use this argument
  playbookInputQuery:
- key: entry_id
  value: {}
  required: false
  description: This is the entry id of the imported file. If a url is supplied, do
    not use this argument
  playbookInputQuery:
- key: output_format
  value: {}
  required: true
  description: |
    This is the desired output format
  playbookInputQuery:
- key: export_via
  value: {}
  required: true
  description: |
    The method for exporting the resulted file, url or war_room_entry
  playbookInputQuery:
outputs: []
tests:
- CloudConvert-test
fromversion: 5.0.0
